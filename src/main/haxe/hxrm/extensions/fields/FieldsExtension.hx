package hxrm.extensions.fields;

import hxrm.extensions.properties.PropertiesExtension;
import haxe.macro.Type;
import haxe.macro.Context;
import haxe.macro.Expr;
import haxe.macro.Expr.ComplexType;
import haxe.macro.Expr.Field;
import hxrm.generator.GeneratorScope;
import hxrm.analyzer.NodeScope;
import hxrm.extensions.base.IHxmrExtension;

class FieldsExtension implements IHxmrExtension {
    public function new() {
    }

    public function analyze(context : HxmrContext, scope:NodeScope):Bool {

        return false;
    }

    // return true if it needs one more iteration
    public function generate(context:HxmrContext, scope:GeneratorScope) : Bool {
    
        if(scope.ctorExprs == null) {
            return true;
        }

        scope.itorExprs = new Map();
        
        scope.itorExprs.set("this", scope.ctorExprs);

        for (field in scope.context.node.fields) {
            parseFieldInitializator(context, scope, field.name, field.type);
            switch(scope.context.node.initializers.get(field.name)) {
                case InitNodeScope(itor):
                    generateInitFunction(context, scope, field.name, itor.value);
                case _:
            }
        }
        return false;
    }

    function parseFieldInitializator(context : HxmrContext, scope : GeneratorScope, fieldName : String, fieldType : Type) : Void {

        var fieldComplexType : ComplexType = Context.toComplexType(fieldType);

        var field : Field = {
            name : fieldName,
            doc : null,//"autogenerated NodeScope field " + initializator.type,
            access : [APublic],
            pos : scope.context.pos,
            kind : FVar(fieldComplexType)
        };
        scope.typeDefinition.fields.unshift(field);
    }

    function generateInitFunction(context:HxmrContext, scope:GeneratorScope, fieldName : String, initScope : NodeScope) : Void {

        var funName = generateInitializerName(fieldName);

        var builders : Array<Expr> = [];

        scope.itorExprs.set(fieldName, builders);

        var ctor = {
            expr : ENew(
                {
                    name : initScope.typeName.className,
                    pack : initScope.typeName.packageNameParts,
                    params : [] // TODO ctor params
                },
                []
            ),
            pos : scope.context.pos
        }

        var ctor = macro $i {fieldName} = ${ctor};

        var ifExpr : Expr = {
            expr : EIf(
                {
                    expr : EBinop(
                        OpEq,
                        {
                            expr : EConst(CIdent(fieldName)),
                            pos : scope.context.pos
                        },
                        {
                            expr : EConst(CIdent("null")),
                            pos : scope.context.pos
                        }
                    ),
                    pos : scope.context.pos
                },
                {
                    expr : EBlock(
                        [
                            ctor,
                            {
                                expr : EBlock(builders),
                                pos : scope.context.pos
                            }
                        ]
                    ),
                    pos : scope.context.pos
                },
                null
            ),
            pos : scope.context.pos
        };

        var initFunction : Field = {
            name: funName,
            doc: null,//'"autogenerated NodeScope init function",
            access: [APrivate, AInline],
            pos: scope.context.pos,
            kind: FFun(
                {
                    args:[],
                    ret:null,
                    params:[],
                    expr: {
                        expr : EBlock([ifExpr, macro return $i { fieldName }]),
                        pos : scope.context.pos
                    }
                }
            )
        }
        scope.typeDefinition.fields.push(initFunction);
    }

    public inline function generateInitializerName(fieldName : String) : String {
        return "init_" + fieldName;
    }
}
